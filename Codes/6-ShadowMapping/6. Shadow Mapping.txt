6. Shadow Mapping
마지막 과제는 Shadow mapping 입니다. 기존 과제보다 난이도가 높은 편이므로 높은 배점이 적용됩니다.
다음과 같은 과정을 통해 구현하고, 각 과정이 비정상적인 경우 감점됩니다.
1. Main code의 초기화 부분에서 FBO를 생성합니다. FBO의 크기는 1024x1024 이상으로 하고, channel 깊이는 float로 지정하여 생성하여야 합니다.
2. Shadow map을 만들기 위한 shader program을 작성합니다. vertex shader에서는 조명의 view, projection matrix를 받아서, transform한 결과를 보내고,
fragment shader에서는 rgb 모든 channel에 gl_fragCoord의 z값이 저장되도록 합니다.
3. Main code의 render 부분에서 조명을 시점으로 한 view matrix, projection matrix를 계산하고 shadow map을 만들기 위한 프로그램을 사용하여
FBO에 shadow map을 render 합니다. 이때 projection matrix는 orthographic 으로 하는 것이 좋으며, perspective로 하여도 상관 없습니다.
4. 최종 rendering을 위한 vertex shader에서는 역시 조명을 시점으로 하는 view, projection matrix를 받아서, 각 정점의 조명 입장에서의 normalized coordinate를 계산하고, fragment shader로 전달합니다.
5. fragment shader에서는 얻은 normalized coordinate를 이용하여 shadow map 좌표 및 조명과의 거리를 계산하고, 거리가 shadow map에 저장된 거리보다 멀면 밝기를 줄입니다.
6. main code에서는 최종 rendering을 위한 shader program에 조명을 시점으로 한 view, projection matrix를 uniform으로 전달하고, shadow map을 texture로 전달합니다.
7. 보다 아름다운 shadow mapping을 위해 bias를 적용합니다.
8. shadow의 경계선을 아름답게 보이기 위해 poisson sample을 이용하여 shadow map을 multisampling합니다.
Main code(cpp)와 2 set의 shader code (shadow shader program, rendering shader program)을 제출합니다.