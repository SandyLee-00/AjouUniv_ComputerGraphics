세번째 과제는 3D viewing 을 구현하는 내용입니다.
강의 자료와 영상을 참고하여, 
1. 3차원 물체 (J3A 형식)을 읽고, 각종 Buffer를 만들고 rendering 합니다. (j3a.hpp 중 comment 참고)
2. vertex shader를 수정하여 Model, Viewing, projection transform 을 uniform으로 받고, 이에 따라 입력된 vertex의 normalized coordinate를 계산하여 gl_Position에 저장합니다.
3. glfw 의 mouse position callback 과 scroll callback 기능을 활용하여 마우스 입력에 따라 가상 카메라의 방향, fov 값을 변화시킬 수 있도록 합니다.
4. 입력에 따라 변화된 카메라의 방향에 따라 카메라의 위치를 계산하고, 이에 따른 View matrix를 계산하여 vertex shader에 전달합니다. (glm::rotate 및 glm::lookAt 활용)
5. 입력에 따라 변화된 fov 값을 기반으로 projection matrix를 계산하여 vertex shader에 전달합니다. (glm::perspective 활용)
이때 카메라의 pitch는 -90도에서 90도 사이로 유지되도록 하고, fov는 10도에서 170도 사이로 유지되도록 합니다.

제출은 소스코드 (cpp 파일과 shader 파일)를 제출합니다.

FAQ:
1. j3a.cpp 및 j3a.hpp 는 반드시 수정된 버전을 다운 받아 사용하십시오.
2. j3a.cpp는 반드시 프로젝트 탐색기의 소스코드 폴더에 들어가 있어야 합니다.
3. Run time exception이 발생하는 경우에는 콘솔에 출력된 내용을 확인하십시오.
   j3a 파일을 읽지 못한 경우에 buffer에 데이터를 넘기는 과정에서 exception이 발생합니다. 이때는 j3a 파일 경로를 절대 경로로 바꾸어 다시 시도해 보십시오.
